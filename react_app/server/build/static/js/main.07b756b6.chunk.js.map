{"version":3,"sources":["components/PostItem.js","GraphQL/Queries/PostQueries.js","components/PostList.js","GraphQL/Mutations/PostMutations.js","components/CreatePost.js","App.js","index.js"],"names":["PostItem","id","title","description","rating","Card","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","size","LOAD_POSTS","gql","PostList","useQuery","loading","data","error","extensions","refetch","useState","posts","setPosts","useEffect","getAllPosts","console","log","className","length","map","post","CREATE_NEW_POST","CreatePost","useMutation","createPost","creatPostState","setCreatePostState","TextField","label","value","onChange","target","multiline","onClick","variables","App","errorLink","onError","graphqlErrors","networkError","message","location","path","alert","hostName","window","hostname","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","ApolloProvider","host","split","ReactDOM","createRoot","document","getElementById","render","StrictMode","element"],"mappings":"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","file":"static/js/main.07b756b6.chunk.js","sourcesContent":["import React from 'react'\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nfunction PostItem({ id, title, description, rating }) {\r\n    return (\r\n        <div>\r\n            <Card >\r\n\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {title}\r\n\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {description}\r\n\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button size=\"small\">Share</Button>\r\n                    <Button size=\"small\">Learn More</Button>\r\n                </CardActions>\r\n            </Card>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostItem\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const LOAD_POSTS = gql`\r\nquery{\r\n    getAllPosts{\r\n        id\r\n        title\r\n        description\r\n        rating  \r\n    }\r\n}\r\n`","import React, { useEffect, useState } from 'react'\r\nimport PostItem from './PostItem'\r\nimport { useQuery, gql } from '@apollo/client'\r\nimport { LOAD_POSTS } from '../GraphQL/Queries/PostQueries'\r\nfunction PostList() {\r\n    const { loading, error, data, extensions ,refetch} = useQuery(LOAD_POSTS)\r\n    const p = useQuery(LOAD_POSTS)\r\n    const [posts, setPosts] = useState([])\r\n    const [host, setHost] = useState([])\r\n    // console.log(\"&&&&&&&&\",p,refetch.toString())\r\n    useEffect(() => {\r\n        if (data) {\r\n            setPosts(data.getAllPosts)\r\n        }\r\n        if (extensions) {\r\n            console.log(\"dd\", extensions)\r\n        }\r\n    }, [loading])\r\n\r\n    function renderPosts() {\r\n        if (posts.length > 0)\r\n            return posts.map((post) => {\r\n\r\n                return <div className='post-item' key={post.id}><PostItem  {...post} /></div>\r\n            })\r\n        else\r\n            return \"null\"\r\n    }\r\n    return (\r\n        <>     \r\n            <div  className=\"post-list\">\r\n\r\n                {renderPosts()}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostList","import { gql } from '@apollo/client'\r\n\r\nexport const CREATE_NEW_POST = gql`\r\n    mutation createNewPost(\r\n    $title:String!\r\n    $description:String\r\n    $rating:Int){\r\n        createNewPost(\r\n        title:$title\r\n        description:$description\r\n        rating:$rating){\r\n        id\r\n        title\r\n        description\r\n    }\r\n}\r\n`","import React, { useState } from 'react'\r\nimport TextField from '@mui/material/TextField';\r\nimport { Button } from '@mui/material';\r\nimport { useMutation } from '@apollo/client';\r\nimport { CREATE_NEW_POST } from '../GraphQL/Mutations/PostMutations';\r\nfunction CreatePost() {\r\n    const [createPost, { error }] = useMutation(CREATE_NEW_POST)\r\n\r\n    const addPost = () => {\r\n        createPost({\r\n            variables: {\r\n                title: creatPostState.title,\r\n                description: creatPostState.description,\r\n                rating: 4\r\n            }\r\n        })\r\n    }\r\n\r\n    const [creatPostState, setCreatePostState] = useState({\r\n        title: \"\", description: \"\"\r\n    })\r\n\r\n    return (\r\n\r\n        <div className='create-post'>\r\n\r\n            <h2>Create a new Post</h2>\r\n            {/* <div> */}\r\n            <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"title\"\r\n                variant=\"outlined\"\r\n                value={creatPostState.title}\r\n                onChange={({ target: { value } }) => { setCreatePostState({ ...creatPostState, title: value }) }} />\r\n\r\n            <TextField\r\n                id=\"outlined-basic\"\r\n                multiline label=\"description\"\r\n                variant=\"outlined\"\r\n                value={creatPostState.description}\r\n                onChange={({ target: { value } }) => { setCreatePostState({ ...creatPostState, description: value }) }}\r\n            />\r\n\r\n            <Button variant=\"contained\" color=\"success\" onClick={addPost}>\r\n                Create Post\r\n            </Button>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default CreatePost","\nimport './App.css';\nimport React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from, F\n} from '@apollo/client';\nimport { ErrorLink, onError } from '@apollo/client/link/error'\nimport PostList from './components/PostList';\nimport CreatePost from './components/CreatePost';\n\nfunction App() {\n  const errorLink = onError(({ graphqlErrors, networkError }) => {\n    if (graphqlErrors) {\n      graphqlErrors.map(({ message, location, path }) => {\n        alert(`Graphql error ${message}`)\n      })\n    }\n    if (networkError) {\n      console.log(\"=========network error======== \", networkError)\n    }\n  })\n  const hostName = window.location.hostname\n  // const host = `www.domain2.com:8080`\n  const link = from([\n    errorLink,\n    new HttpLink({ uri: `http://${hostName}:8080/graphql` })\n  ])\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: link\n  })\n\n  return (\n    <ApolloProvider client={client}>\n      <div className='heading'>\n        <h2>Host is, {window.location.host.split(\":\")[0]}</h2>\n      </div>\n\n      <div className=\"app\">\n        <CreatePost />\n        <PostList />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"/home\" element={<App />} />\n        <Route path=\"/*\" element={<h1>404 not found</h1>}></Route>\n      </Routes>\n    </BrowserRouter>\n    {/* <App /> */}\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}